name: Foodgram deploy workflow

on: 
  push:
    branches: [ main ]

jobs:

  tests:
    strategy:
      matrix:
        python-version: [3.10.11]
        os: [ubuntu-20.04, ubuntu-22.04]
    runs-on: ${{ matrix.os }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        cd backend/
        cd foodgram/
        python -m pip install --upgrade pip 
        pip install -r requirements.txt 

    - name: Run migrations
      run: |
        cd backend/
        cd foodgram/
        python manage.py migrate
      env:
        DB_ENGINE: django.db.backends.postgresql
        DB_NAME: postgres
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        DB_HOST: 127.0.0.1
        DB_PORT: 5432

    - name: Test with flake8 and pytest
      run: |
        cd backend/
        python -m flake8
        pytest
      env:
        DB_ENGINE: django.db.backends.postgresql
        DB_NAME: postgres
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
  
  build_and_push_to_docker_hub:
      name: Push Docker image to Docker Hub
      runs-on: ubuntu-latest
      needs: tests
      steps:
        - name: Check out the repo
          uses: actions/checkout@v2

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1 

        - name: Login to Docker 
          uses: docker/login-action@v1 
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Push to Docker Hub
          uses: docker/build-push-action@v2 
          with:
            context: ./backend/foodgram/
            push: true
            tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
        
        - name: Push to Docker Hub
          uses: docker/build-push-action@v2 
          with:
            context: ./frontend/
            push: true
            tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker-compose stop
            sudo docker-compose rm web
            sudo docker-compose rm oxdium/foodgram_backend:latest
            sudo docker-compose rm oxdium/foodgram_frontend:latest
            touch .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }} >> .env
            echo CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }} >> .env
            echo CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }} >> .env
            echo CELERY_TASK_TIME_LIMIT=${{ secrets.CELERY_TASK_TIME_LIMIT }} >> .env
            echo ACCESS_TOKEN_LIFETIME=${{ secrets.ACCESS_TOKEN_LIFETIME}} >> .env
            echo REFRESH_TOKEN_LIFETIME=${{ secrets.REFRESH_TOKEN_LIFETIME }} >> .env
            echo ALGORITHM=${{ secrets.ALGORITHM }} >> .env
            echo SLIDING_TOKEN_LIFETIME=${{ secrets.SLIDING_TOKEN_LIFETIME }} >> .env
            echo SLIDING_TOKEN_REFRESH_LIFETIME=${{ secrets.SLIDING_TOKEN_REFRESH_LIFETIME}} >> .env
            echo CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }} >> .env
            echo FLOWER_USER=${{ secrets.FLOWER_USER }} >> .env
            echo FLOWER_PASSWORD==${{ secrets.FLOWER_PASSWORD }} >> .env
            sudo docker-compose up -d
  
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!
